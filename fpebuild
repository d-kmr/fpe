#!/bin/bash
#////////////////////////////////////////////////
# fpe building script
# Daisuke Kimura and Mahmudul Faisal Al Ameen, 2021 Â©
#
# type './fpebuild make'   : build the whole system + installing SVF and LLVM
# type './fpebuild remake' : clean and build (mainly for clean installing of SVF)
# type './fpebuild clean'  : clean
#
# Note:
# if the LLVM_DIR variable is not set, LLVM will be downloaded.
#////////////////////////////////////////////////


FPEdir=$(pwd)
sysOS=`uname -s`
SVFgit="https://github.com/SVF-tools/SVF.git"
SVFdir="$FPEdir/SVF"
SVFheader="$SVFdir/include"
SVFlib="$SVFdir/Release-build/lib"
Analyzer="analyzer"

function message(){
	echo "Usage: fpebuild [options]"
	echo "[Options]"
	echo "make             : compile fpe installing SVF"
	echo "make analyzer    : compile only analyzer"
	echo "make transformer : compile only transformer"	
	echo "remake           : clean all and recompile fpe and SVF"	
	echo "clean            : delete SVF directory and other object files"
	exit
}

function cleaning(){
	echo "Deleting SVF directory and .o files ..."
	rm -fr $SVFdir
	rm -f *.o
	rm -f $Analyzer
	echo "Done"
}

if [ $# = 0 ] 
then
	message
fi	

if [ $1 != "make" ] && [ $1 != "remake" ] && [ $1 != "clean" ]
then
	message
fi   

if [ $1 = "clean" ]
then
	cleaning
	exit
fi

if [ $1 = "remake" ]
then
	cleaning
fi

echo "SVF checking ..."
SVFinstalled=0
if [ -d $SVFdir ]
then
	echo "$SVFdir exists"
	SVFinstalled=1
else
	echo "$SVFdir does not exist"
fi   

# SVF installation
if [[ $SVFinstalled = 0 ]] 
then
	echo "Start building of SVF"	
	echo "git cloning"
	git clone $SVFgit
	echo "Patching to suppress output from SVF"
	patch SVF/lib/Util/PTAStat.cpp diffs/PTAStat.diff
	patch SVF/include/PersistentPointsToCache.h diffs/PersistentPointsToCache.diff	
	echo "cd SVF"	
	cd SVF
	echo "build SVF"
	source ./build.sh
fi
echo ""

# building Analyzer
function buildAnalyzer() {
	echo "Start building analyzer"
	echo "cd fpe"
	cd $FPEdir
	if [[ $LLVM_DIR = "" ]]
	then
		LLVM_DIR="$SVFdir/llvm-12.0.0.obj"
		echo "Please add $SVFdir/llvm-12.0.0.obj to PATH"
	fi   
	LLVMinclude="$LLVM_DIR/include"
	LLVMlib="$LLVM_DIR/lib"
	echo "LLVM_DIR = $LLVM_DIR"
	echo "LLVMinclude = $LLVMinclude"
	echo "SVFheader = $SVFheader"

	g++ -g -I$LLVMinclude -I$SVFheader -fPIC -std=gnu++14 -O3 -fno-rtti -Wno-deprecated -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -o analyzer.o -c analyzer.cpp

	g++ -g -fPIC -std=gnu++14 -O3 -fno-rtti -Wno-deprecated analyzer.o -o $Analyzer $SVFlib/libSvf.a $SVFlib/CUDD/libCudd.a $LLVMlib/libLLVMBitWriter.a $LLVMlib/libLLVMCore.a $LLVMlib/libLLVMipo.a $LLVMlib/libLLVMIRReader.a $LLVMlib/libLLVMInstCombine.a $LLVMlib/libLLVMInstrumentation.a $LLVMlib/libLLVMTarget.a $LLVMlib/libLLVMLinker.a $LLVMlib/libLLVMAnalysis.a $LLVMlib/libLLVMScalarOpts.a $LLVMlib/libLLVMSupport.a $LLVMlib/libLLVMBitWriter.a $LLVMlib/libLLVMAsmParser.a $LLVMlib/libLLVMInstCombine.a $LLVMlib/libLLVMAggressiveInstCombine.a $LLVMlib/libLLVMVectorize.a $LLVMlib/libLLVMTransformUtils.a $LLVMlib/libLLVMAnalysis.a $LLVMlib/libLLVMObject.a $LLVMlib/libLLVMBitReader.a $LLVMlib/libLLVMMCParser.a $LLVMlib/libLLVMTextAPI.a $LLVMlib/libLLVMProfileData.a $LLVMlib/libLLVMCore.a $LLVMlib/libLLVMRemarks.a $LLVMlib/libLLVMBitstreamReader.a $LLVMlib/libLLVMMC.a $LLVMlib/libLLVMBinaryFormat.a $LLVMlib/libLLVMDebugInfoCodeView.a $LLVMlib/libLLVMDebugInfoMSF.a $LLVMlib/libLLVMSupport.a -lrt -ldl -ltinfo -lpthread -lz -lm $LLVMlib/libLLVMDemangle.a 
	echo "Finish building analyzer"
}

echo "WARNING: Stop compiling transformer by technical issues"
exit 0  

# building Transformer
function buildTransformer() {
	echo ""
	echo "Start building transformer"
	cd $FPEdir/slac
	make
	echo "Finished building transformer"
	cd $FPEdir
}

if [[ $2 != "transformer" ]]
then
	buildAnalyzer
fi

if [[ $2 != "analyzer" ]]
then
	buildTransformer
fi

