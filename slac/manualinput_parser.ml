type token =
  | IDENT of (string)
  | NUM of (int)
  | FUNCTIONHEADER of (string)
  | LT
  | LE
  | GT
  | GE
  | PLUS
  | MINUS
  | MOD
  | SLASH
  | LSHIFT
  | RSHIFT
  | HAT
  | TILDE
  | AST
  | EQ
  | NEQA
  | NEQB
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COLON
  | COMMA
  | ATMARK
  | DOLLAR
  | SHARP
  | BAND
  | BOR
  | FUNCTIONNAME
  | INPUT
  | OUTPUT
  | EX
  | ALL
  | ARR
  | ARRAY
  | STR
  | STRINGPART
  | EMP
  | AND
  | ANDAND
  | BAR
  | BARBAR
  | PTO
  | VDASH
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "manualinput_parser.mly"
open Slsyntax
# 57 "manualinput_parser.ml"
let yytransl_const = [|
  260 (* LT *);
  261 (* LE *);
  262 (* GT *);
  263 (* GE *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* MOD *);
  267 (* SLASH *);
  268 (* LSHIFT *);
  269 (* RSHIFT *);
  270 (* HAT *);
  271 (* TILDE *);
  272 (* AST *);
  273 (* EQ *);
  274 (* NEQA *);
  275 (* NEQB *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* LPAREN *);
  279 (* RPAREN *);
  280 (* LBRACKET *);
  281 (* RBRACKET *);
  282 (* COLON *);
  283 (* COMMA *);
  284 (* ATMARK *);
  285 (* DOLLAR *);
  286 (* SHARP *);
  287 (* BAND *);
  288 (* BOR *);
  289 (* FUNCTIONNAME *);
  290 (* INPUT *);
  291 (* OUTPUT *);
  292 (* EX *);
  293 (* ALL *);
  294 (* ARR *);
  295 (* ARRAY *);
  296 (* STR *);
  297 (* STRINGPART *);
  298 (* EMP *);
  299 (* AND *);
  300 (* ANDAND *);
  301 (* BAR *);
  302 (* BARBAR *);
  303 (* PTO *);
  304 (* VDASH *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* NUM *);
  259 (* FUNCTIONHEADER *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\008\000\009\000\009\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\010\000\010\000\010\000\010\000\011\000\011\000\
\011\000\012\000\012\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\005\000\005\000\005\000\
\005\000\005\000\014\000\015\000\015\000\015\000\015\000\015\000\
\015\000\004\000\004\000\004\000\006\000\006\000\016\000\017\000\
\017\000\018\000\018\000\019\000\020\000\021\000\021\000\022\000\
\022\000\023\000\023\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\003\000\001\000\002\000\003\000\003\000\
\004\000\002\000\001\000\001\000\003\000\004\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\001\000\001\000\003\000\003\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\002\000\004\000\005\000\006\000\006\000\006\000\
\006\000\001\000\001\000\003\000\001\000\002\000\003\000\001\000\
\003\000\002\000\003\000\007\000\011\000\001\000\003\000\006\000\
\007\000\001\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\077\000\000\000\000\000\076\000\000\000\
\001\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\064\000\000\000\000\000\000\000\000\000\067\000\
\000\000\026\000\000\000\012\000\000\000\036\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\073\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\005\000\006\000\000\000\025\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\000\000\009\000\
\000\000\007\000\004\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\062\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\054\000\055\000\056\000\
\057\000\000\000\000\000\035\000\000\000\000\000\000\000\069\000"

let yydgoto = "\002\000\
\004\000\054\000\036\000\117\000\118\000\119\000\005\000\084\000\
\047\000\082\000\162\000\163\000\038\000\120\000\121\000\019\000\
\020\000\015\000\013\000\040\000\041\000\006\000\007\000"

let yysindex = "\012\000\
\053\255\000\000\030\255\000\000\072\000\053\255\000\000\055\255\
\000\000\000\000\079\255\097\255\094\255\002\255\115\255\104\255\
\127\255\000\000\000\000\061\255\215\001\130\255\068\255\000\000\
\148\255\000\000\246\254\000\000\068\255\000\000\000\000\215\001\
\155\255\081\255\081\255\022\002\236\254\000\000\068\255\137\255\
\000\000\068\255\006\003\000\000\111\001\195\255\176\255\006\003\
\249\001\057\255\177\255\000\000\081\255\065\001\065\001\068\255\
\068\255\068\255\068\255\232\255\068\255\068\255\068\255\068\255\
\068\255\068\255\068\255\068\255\068\255\068\255\068\255\068\255\
\184\001\215\001\215\001\059\002\130\255\069\002\000\000\111\001\
\006\003\250\254\000\000\000\000\195\255\000\000\000\000\176\255\
\036\255\211\255\044\255\044\255\006\003\006\003\006\003\006\003\
\068\255\178\255\178\255\095\255\095\255\187\001\187\001\006\003\
\095\255\006\003\006\003\006\003\006\003\006\003\192\255\205\255\
\223\255\224\255\000\000\179\000\000\000\051\255\230\255\077\255\
\007\000\229\255\044\255\097\255\000\000\069\002\135\255\000\000\
\068\255\000\000\000\000\000\000\178\255\068\255\068\255\068\255\
\068\255\016\000\215\001\000\000\223\000\000\000\077\255\253\255\
\000\000\006\003\094\002\103\002\128\002\137\002\041\001\000\000\
\215\001\068\255\068\255\068\255\068\255\129\255\255\255\000\000\
\006\003\013\000\019\000\163\255\162\002\187\002\212\002\237\002\
\068\255\068\255\138\255\000\000\184\001\000\000\000\000\000\000\
\000\000\006\003\006\003\000\000\017\000\184\001\020\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\039\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\168\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\083\255\000\000\000\000\000\000\212\255\118\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\144\255\174\255\237\254\243\254\213\255\004\000\
\000\000\195\000\239\000\047\000\091\000\048\255\071\001\102\001\
\135\000\044\000\088\000\132\000\133\001\164\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\175\255\244\254\180\255\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\001\000\000\000\000\000\000\
\000\000\000\000\210\255\000\000\000\000\000\000\000\000\000\000\
\000\000\215\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\002\000\000\000\000\
\006\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\014\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\023\000\233\255\141\255\030\000\103\255\000\000\233\000\
\017\001\245\000\000\000\158\000\000\000\000\000\000\000\050\001\
\000\000\208\000\000\000\000\000\000\001\000\000\072\001"

let yytablesize = 1062
let yytable = "\043\000\
\072\000\070\000\017\000\041\000\142\000\048\000\073\000\041\000\
\049\000\042\000\047\000\045\000\001\000\042\000\047\000\076\000\
\128\000\046\000\078\000\181\000\129\000\081\000\074\000\041\000\
\075\000\041\000\018\000\152\000\183\000\042\000\047\000\042\000\
\093\000\094\000\095\000\096\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\116\000\037\000\019\000\019\000\019\000\019\000\003\000\
\126\000\055\000\131\000\019\000\019\000\050\000\090\000\008\000\
\019\000\019\000\019\000\026\000\027\000\028\000\019\000\009\000\
\019\000\133\000\019\000\089\000\026\000\027\000\028\000\087\000\
\011\000\052\000\029\000\091\000\092\000\024\000\074\000\025\000\
\075\000\042\000\019\000\029\000\019\000\139\000\019\000\075\000\
\141\000\033\000\042\000\074\000\012\000\075\000\053\000\122\000\
\123\000\146\000\033\000\063\000\066\000\063\000\147\000\148\000\
\149\000\150\000\111\000\112\000\113\000\114\000\115\000\141\000\
\014\000\024\000\024\000\024\000\024\000\071\000\072\000\161\000\
\016\000\022\000\165\000\166\000\167\000\168\000\024\000\024\000\
\024\000\026\000\158\000\028\000\024\000\021\000\024\000\023\000\
\024\000\178\000\179\000\161\000\017\000\116\000\045\000\039\000\
\029\000\159\000\169\000\051\000\046\000\145\000\116\000\042\000\
\024\000\129\000\024\000\077\000\024\000\027\000\050\000\033\000\
\122\000\027\000\050\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\164\000\011\000\
\011\000\011\000\011\000\062\000\063\000\173\000\011\000\066\000\
\011\000\067\000\011\000\083\000\049\000\059\000\011\000\011\000\
\049\000\059\000\048\000\085\000\046\000\074\000\048\000\075\000\
\071\000\072\000\011\000\132\000\011\000\134\000\011\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\135\000\010\000\010\000\010\000\010\000\026\000\
\027\000\028\000\010\000\043\000\010\000\028\000\010\000\043\000\
\097\000\028\000\010\000\010\000\136\000\137\000\029\000\051\000\
\051\000\051\000\051\000\051\000\140\000\042\000\010\000\043\000\
\010\000\043\000\010\000\072\000\070\000\033\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\075\000\008\000\008\000\008\000\008\000\143\000\153\000\
\170\000\008\000\044\000\008\000\031\000\008\000\044\000\033\000\
\031\000\008\000\008\000\033\000\032\000\151\000\074\000\171\000\
\032\000\172\000\184\000\182\000\027\000\008\000\044\000\008\000\
\044\000\008\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\034\000\130\000\016\000\016\000\
\016\000\016\000\038\000\088\000\127\000\016\000\038\000\016\000\
\180\000\016\000\044\000\144\000\125\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\038\000\016\000\000\000\016\000\000\000\016\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\018\000\018\000\018\000\018\000\039\000\000\000\
\000\000\018\000\039\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\039\000\018\000\000\000\018\000\
\000\000\018\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\000\000\017\000\017\000\
\017\000\017\000\040\000\000\000\000\000\017\000\040\000\017\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\040\000\017\000\000\000\017\000\000\000\017\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\067\000\068\000\069\000\070\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\000\000\071\000\072\000\013\000\013\000\013\000\000\000\000\000\
\000\000\013\000\000\000\013\000\000\000\013\000\000\000\000\000\
\000\000\138\000\000\000\000\000\000\000\000\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\013\000\067\000\013\000\
\000\000\013\000\015\000\015\000\015\000\015\000\015\000\015\000\
\000\000\000\000\015\000\015\000\000\000\071\000\072\000\015\000\
\015\000\015\000\000\000\000\000\000\000\015\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\138\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\015\000\000\000\015\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\014\000\014\000\
\026\000\158\000\028\000\014\000\014\000\014\000\000\000\000\000\
\000\000\014\000\000\000\014\000\000\000\014\000\000\000\029\000\
\159\000\000\000\000\000\000\000\000\000\000\000\042\000\160\000\
\026\000\027\000\028\000\000\000\000\000\014\000\033\000\014\000\
\000\000\014\000\020\000\020\000\020\000\020\000\000\000\029\000\
\000\000\000\000\020\000\020\000\030\000\031\000\032\000\020\000\
\020\000\020\000\000\000\090\000\000\000\020\000\033\000\020\000\
\000\000\020\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\000\000\079\000\027\000\
\028\000\020\000\000\000\020\000\000\000\020\000\023\000\023\000\
\023\000\000\000\000\000\000\000\023\000\029\000\023\000\000\000\
\023\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\021\000\021\000\021\000\021\000\033\000\000\000\000\000\000\000\
\023\000\000\000\023\000\000\000\023\000\021\000\021\000\021\000\
\000\000\000\000\000\000\021\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\022\000\000\000\000\000\000\000\000\000\021\000\
\000\000\021\000\000\000\021\000\022\000\022\000\022\000\026\000\
\027\000\028\000\022\000\000\000\022\000\000\000\022\000\000\000\
\000\000\000\000\060\000\061\000\062\000\063\000\029\000\000\000\
\066\000\000\000\067\000\030\000\031\000\032\000\022\000\000\000\
\022\000\000\000\022\000\000\000\000\000\033\000\026\000\027\000\
\028\000\071\000\072\000\034\000\035\000\111\000\112\000\113\000\
\114\000\115\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\030\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\034\000\035\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\072\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\067\000\068\000\069\000\
\070\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\011\000\000\000\000\000\071\000\072\000\000\000\000\000\
\011\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\011\000\011\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\067\000\000\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\067\000\124\000\000\000\000\000\
\000\000\071\000\072\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\072\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\067\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\067\000\000\000\
\154\000\000\000\000\000\000\000\071\000\072\000\000\000\000\000\
\000\000\155\000\000\000\000\000\000\000\071\000\072\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\067\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\067\000\000\000\156\000\000\000\000\000\000\000\071\000\072\000\
\000\000\000\000\000\000\157\000\000\000\000\000\000\000\071\000\
\072\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\072\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\072\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\072\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\177\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\072\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\072\000"

let yycheck = "\023\000\
\000\000\000\000\001\001\023\001\120\000\029\000\027\001\027\001\
\032\000\023\001\023\001\022\001\001\000\027\001\027\001\039\000\
\023\001\028\001\042\000\173\000\027\001\045\000\043\001\043\001\
\045\001\045\001\025\001\143\000\182\000\043\001\043\001\045\001\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\021\000\004\001\005\001\006\001\007\001\003\001\
\080\000\035\000\023\001\012\001\013\001\032\000\027\001\034\001\
\017\001\018\001\019\001\000\001\001\001\002\001\023\001\000\000\
\025\001\097\000\027\001\053\000\000\001\001\001\002\001\023\001\
\026\001\001\001\015\001\054\000\055\000\025\001\043\001\027\001\
\045\001\022\001\043\001\015\001\045\001\043\001\047\001\045\001\
\120\000\030\001\022\001\043\001\022\001\045\001\022\001\074\000\
\075\000\129\000\030\001\025\001\014\001\027\001\134\000\135\000\
\136\000\137\000\038\001\039\001\040\001\041\001\042\001\143\000\
\024\001\004\001\005\001\006\001\007\001\031\001\032\001\151\000\
\035\001\026\001\154\000\155\000\156\000\157\000\017\001\018\001\
\019\001\000\001\001\001\002\001\023\001\027\001\025\001\017\001\
\027\001\169\000\170\000\171\000\001\001\173\000\022\001\022\001\
\015\001\016\001\026\001\001\001\028\001\023\001\182\000\022\001\
\043\001\027\001\045\001\027\001\047\001\023\001\023\001\030\001\
\139\000\027\001\027\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\153\000\016\001\
\017\001\018\001\019\001\010\001\011\001\027\001\023\001\014\001\
\025\001\016\001\027\001\001\001\023\001\023\001\031\001\032\001\
\027\001\027\001\023\001\028\001\028\001\043\001\027\001\045\001\
\031\001\032\001\043\001\001\001\045\001\022\001\047\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\022\001\016\001\017\001\018\001\019\001\000\001\
\001\001\002\001\023\001\023\001\025\001\023\001\027\001\027\001\
\009\001\027\001\031\001\032\001\022\001\022\001\015\001\038\001\
\039\001\040\001\041\001\042\001\023\001\022\001\043\001\043\001\
\045\001\045\001\047\001\003\001\003\001\030\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\045\001\016\001\017\001\018\001\019\001\016\001\027\001\
\026\001\023\001\023\001\025\001\023\001\027\001\027\001\023\001\
\027\001\031\001\032\001\027\001\023\001\022\001\000\000\027\001\
\027\001\023\001\023\001\027\001\027\001\043\001\043\001\045\001\
\045\001\047\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\023\001\085\000\016\001\017\001\
\018\001\019\001\023\001\051\000\080\000\023\001\027\001\025\001\
\171\000\027\001\025\000\124\000\077\000\006\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\045\001\043\001\255\255\045\001\255\255\047\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\023\001\255\255\
\255\255\023\001\027\001\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\045\001\043\001\255\255\045\001\
\255\255\047\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\023\001\255\255\255\255\023\001\027\001\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\045\001\043\001\255\255\045\001\255\255\047\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\255\255\031\001\032\001\017\001\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\047\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\043\001\016\001\045\001\
\255\255\047\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\255\255\031\001\032\001\017\001\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\045\001\255\255\047\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\000\001\001\001\002\001\017\001\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\025\001\255\255\027\001\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\000\001\001\001\002\001\255\255\255\255\043\001\030\001\045\001\
\255\255\047\001\004\001\005\001\006\001\007\001\255\255\015\001\
\255\255\255\255\012\001\013\001\020\001\021\001\022\001\017\001\
\018\001\019\001\255\255\027\001\255\255\023\001\030\001\025\001\
\255\255\027\001\255\255\255\255\036\001\037\001\255\255\255\255\
\255\255\004\001\005\001\006\001\007\001\255\255\000\001\001\001\
\002\001\043\001\255\255\045\001\255\255\047\001\017\001\018\001\
\019\001\255\255\255\255\255\255\023\001\015\001\025\001\255\255\
\027\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\004\001\005\001\006\001\007\001\030\001\255\255\255\255\255\255\
\043\001\255\255\045\001\255\255\047\001\017\001\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\043\001\
\255\255\045\001\255\255\047\001\017\001\018\001\019\001\000\001\
\001\001\002\001\023\001\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\015\001\255\255\
\014\001\255\255\016\001\020\001\021\001\022\001\043\001\255\255\
\045\001\255\255\047\001\255\255\255\255\030\001\000\001\001\001\
\002\001\031\001\032\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\255\255\031\001\032\001\255\255\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\255\255\255\255\
\031\001\032\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\027\001\255\255\255\255\
\255\255\031\001\032\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\027\001\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\031\001\032\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\027\001\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\032\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001"

let yynames_const = "\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  PLUS\000\
  MINUS\000\
  MOD\000\
  SLASH\000\
  LSHIFT\000\
  RSHIFT\000\
  HAT\000\
  TILDE\000\
  AST\000\
  EQ\000\
  NEQA\000\
  NEQB\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ATMARK\000\
  DOLLAR\000\
  SHARP\000\
  BAND\000\
  BOR\000\
  FUNCTIONNAME\000\
  INPUT\000\
  OUTPUT\000\
  EX\000\
  ALL\000\
  ARR\000\
  ARRAY\000\
  STR\000\
  STRINGPART\000\
  EMP\000\
  AND\000\
  ANDAND\000\
  BAR\000\
  BARBAR\000\
  PTO\000\
  VDASH\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  NUM\000\
  FUNCTIONHEADER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'file) in
    Obj.repr(
# 84 "manualinput_parser.mly"
     ( _1 )
# 555 "manualinput_parser.ml"
               : Slsyntax.MIfile.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "manualinput_parser.mly"
      ( [_1] )
# 562 "manualinput_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "manualinput_parser.mly"
      ( _1 @ [_3] )
# 570 "manualinput_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    Obj.repr(
# 93 "manualinput_parser.mly"
   ( _2 )
# 577 "manualinput_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "manualinput_parser.mly"
      (
        match _1 with
        | "PTR" | "ptr" -> T.PTR
        | "EXQ" | "exq" -> T.EXQ
        | "PARAM" | "param" -> T.PARAM
        | "PTRPTR" | "ptrptr" -> T.PTRPTR
        | "GLOBAL" | "global" -> T.GLOBAL
        | "HAT" | "hat" -> T.HAT
        | "BAR" | "bar" -> T.BAR
        | "EXTERN" | "extern" -> T.EXTERN
        | "TILDE" | "tilde" -> T.TILDE
        | "CHECK" | "check" -> T.CHECK
        | "DOT" | "dot" -> T.DOT
        | "NESTED" | "nested" -> T.NESTED
        | "QUESTION" | "question" -> T.QUESTION
        | "DOTDOT" | "dotdot" -> T.DOTDOT
        | "AQUTE" | "acute" -> T.ACUTE
        | "INDIRECT" | "indirect" -> T.INDIRECT
        | "PROTO" | "proto" -> T.PROTO
        | "ARRAY" | "array" -> T.ARRAY [1] 
        | _ -> T.STRUCT _1
      )
# 605 "manualinput_parser.ml"
               : 'var_attriv_one))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv_one) in
    Obj.repr(
# 124 "manualinput_parser.mly"
      ( [_2] )
# 612 "manualinput_parser.ml"
               : 'var_attriv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_attriv) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv_one) in
    Obj.repr(
# 126 "manualinput_parser.mly"
      ( _1 @ [_3] )
# 620 "manualinput_parser.ml"
               : 'var_attriv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 131 "manualinput_parser.mly"
      ( SHterm.Var ("#"^_2,_3) )
# 628 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term_seq) in
    Obj.repr(
# 133 "manualinput_parser.mly"
      ( SHterm.Fcall (_1,_3) )
# 636 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 135 "manualinput_parser.mly"
      ( SHterm.Var (_1,_2) )
# 644 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "manualinput_parser.mly"
    ( SHterm.Var (_1,[]) )
# 651 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 139 "manualinput_parser.mly"
    ( SHterm.Int _1 )
# 658 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 141 "manualinput_parser.mly"
      (
        match _1,_3 with
        | SHterm.Add tt1,SHterm.Add tt2 -> SHterm.Add (tt1 @ tt2)
        | SHterm.Add tt1,_ -> SHterm.Add (tt1 @ [_3])
        | _,SHterm.Add tt2 -> SHterm.Add ([_1] @ tt2)
        | _,_ -> SHterm.Add [_1;_3]
      )
# 672 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 149 "manualinput_parser.mly"
      ( SHterm.Sub [_1;_4] )
# 680 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 151 "manualinput_parser.mly"
      ( SHterm.Sub [_1;_3] )
# 688 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 153 "manualinput_parser.mly"
      ( SHterm.Mod (_1,_3) )
# 696 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 155 "manualinput_parser.mly"
      ( SHterm.Mul (_1,_3) )
# 704 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 157 "manualinput_parser.mly"
      ( SHterm.Div (_1,_3) )
# 712 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 159 "manualinput_parser.mly"
      ( SHterm.Shl (_1,_3) )
# 720 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 161 "manualinput_parser.mly"
      ( SHterm.Shr (_1,_3) )
# 728 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 163 "manualinput_parser.mly"
      ( SHterm.Band (_1,_3) )
# 736 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 165 "manualinput_parser.mly"
      ( SHterm.Bor (_1,_3) )
# 744 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 167 "manualinput_parser.mly"
      ( SHterm.Bxor (_1,_3) )
# 752 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 169 "manualinput_parser.mly"
      ( SHterm.Bnot _2 )
# 759 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 171 "manualinput_parser.mly"
      ( _2 )
# 766 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "manualinput_parser.mly"
    ( 
      let message =
        Printf.sprintf 
          "parse error at line %d:%d-%d"
          ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		  (Parsing.symbol_start ())
		  (Parsing.symbol_end ())
	    in
	    failwith message
    )
# 781 "manualinput_parser.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 187 "manualinput_parser.mly"
      ( [_1] )
# 788 "manualinput_parser.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 190 "manualinput_parser.mly"
      ( _1 @ [_3] )
# 796 "manualinput_parser.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term_seq) in
    Obj.repr(
# 193 "manualinput_parser.mly"
   ( _2 )
# 803 "manualinput_parser.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "manualinput_parser.mly"
    ( 
      let message =
        Printf.sprintf 
          "parse error (term_seq) near characters %d-%d"
          (Parsing.symbol_start ())
	      (Parsing.symbol_end ())
	    in
	    failwith message
    )
# 817 "manualinput_parser.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 209 "manualinput_parser.mly"
      ( ("",_1) )
# 824 "manualinput_parser.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 211 "manualinput_parser.mly"
      ( ("*",_3) )
# 831 "manualinput_parser.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 213 "manualinput_parser.mly"
      ( (_1,_3) )
# 839 "manualinput_parser.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldterm) in
    Obj.repr(
# 218 "manualinput_parser.mly"
      ( [_1] )
# 846 "manualinput_parser.ml"
               : 'fieldterm_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldterm_seq) in
    Obj.repr(
# 220 "manualinput_parser.mly"
      ( _1 :: _3 )
# 854 "manualinput_parser.ml"
               : 'fieldterm_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "manualinput_parser.mly"
      ( P.True )
# 860 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "manualinput_parser.mly"
      ( P.False )
# 866 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 229 "manualinput_parser.mly"
      ( P.Atom(P.Eq,[_1;_3]) )
# 874 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 231 "manualinput_parser.mly"
      ( P.Atom(P.Neq,[_1;_3]) )
# 882 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 233 "manualinput_parser.mly"
      ( P.Atom(P.Neq,[_1;_3]) )
# 890 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 235 "manualinput_parser.mly"
      ( P.Atom(P.Lt,[_1;_3]) )
# 898 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 237 "manualinput_parser.mly"
      ( P.Atom(P.Le,[_1;_3]) )
# 906 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 239 "manualinput_parser.mly"
      ( P.Atom(P.Lt,[_3;_1]) )
# 914 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 241 "manualinput_parser.mly"
      ( P.Atom(P.Le,[_3;_1]) )
# 922 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : SHpure.t) in
    Obj.repr(
# 243 "manualinput_parser.mly"
      ( _2 )
# 929 "manualinput_parser.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_atom) in
    Obj.repr(
# 248 "manualinput_parser.mly"
      ( _1 )
# 936 "manualinput_parser.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHpure.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 250 "manualinput_parser.mly"
      ( P.And [_1;_3] )
# 944 "manualinput_parser.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHpure.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 252 "manualinput_parser.mly"
      ( P.Or [_1;_3] )
# 952 "manualinput_parser.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 254 "manualinput_parser.mly"
      ( P.All(_2,_3) )
# 960 "manualinput_parser.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 256 "manualinput_parser.mly"
      ( P.Ex(_2,_3) )
# 968 "manualinput_parser.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : SHpure.t) in
    Obj.repr(
# 261 "manualinput_parser.mly"
      ( _1 )
# 975 "manualinput_parser.ml"
               : 'pure_and))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    Obj.repr(
# 266 "manualinput_parser.mly"
     ( S.Pto(_1,[]) )
# 982 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : SHterm.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fieldterm_seq) in
    Obj.repr(
# 268 "manualinput_parser.mly"
     ( S.Pto(_1,_4) )
# 990 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 270 "manualinput_parser.mly"
     ( S.Arr(_3,_5) )
# 998 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 272 "manualinput_parser.mly"
     ( S.Arr(_3,_5) )
# 1006 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 274 "manualinput_parser.mly"
     ( S.Str(_3,_5) )
# 1014 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 276 "manualinput_parser.mly"
     ( S.Str(_3,_5) )
# 1022 "manualinput_parser.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "manualinput_parser.mly"
      ( [] )
# 1028 "manualinput_parser.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spat_atom) in
    Obj.repr(
# 283 "manualinput_parser.mly"
      ( [_1] )
# 1035 "manualinput_parser.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'spat_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 285 "manualinput_parser.mly"
      ( _1 :: _3 )
# 1043 "manualinput_parser.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 290 "manualinput_parser.mly"
      ( (P.True,_1) )
# 1050 "manualinput_parser.ml"
               : QFSH.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_and) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 292 "manualinput_parser.mly"
      ( (_1,_2) )
# 1058 "manualinput_parser.ml"
               : QFSH.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 297 "manualinput_parser.mly"
      ( (_1,_3) )
# 1066 "manualinput_parser.ml"
               : 'var_asgn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_asgn) in
    Obj.repr(
# 302 "manualinput_parser.mly"
      ( [_1] )
# 1073 "manualinput_parser.ml"
               : 'var_asgn_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_asgn_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_asgn) in
    Obj.repr(
# 304 "manualinput_parser.mly"
      ( _1 @ [_3] )
# 1081 "manualinput_parser.ml"
               : 'var_asgn_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "manualinput_parser.mly"
      ( [] )
# 1087 "manualinput_parser.ml"
               : 'store))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_asgn_seq) in
    Obj.repr(
# 311 "manualinput_parser.mly"
      ( _2 )
# 1094 "manualinput_parser.ml"
               : 'store))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'store) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : SHpure.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : QFSH.t) in
    Obj.repr(
# 316 "manualinput_parser.mly"
      ( (_2,_4,_6) )
# 1103 "manualinput_parser.ml"
               : 'input))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : SHterm.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'store) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : SHpure.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : QFSH.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : QFSH.t) in
    Obj.repr(
# 321 "manualinput_parser.mly"
      ( (_2,_4,_6,_8,_10) )
# 1114 "manualinput_parser.ml"
               : 'return))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return) in
    Obj.repr(
# 326 "manualinput_parser.mly"
      ( [_1] )
# 1121 "manualinput_parser.ml"
               : 'return_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'return) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'return_seq) in
    Obj.repr(
# 328 "manualinput_parser.mly"
      ( _1 :: _3 )
# 1129 "manualinput_parser.ml"
               : 'return_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'input) in
    Obj.repr(
# 333 "manualinput_parser.mly"
    (
         let (s1,d1,sh1) = _4 in
         {
           MIfunctionIO.rawfunc = _1;
           MIfunctionIO.func = [];           
           MIfunctionIO.s = s1;
           MIfunctionIO.d = d1;
           MIfunctionIO.sh = sh1;
           MIfunctionIO.ret = []
         }
       )
# 1147 "manualinput_parser.ml"
               : 'funcIO))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'input) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'return_seq) in
    Obj.repr(
# 345 "manualinput_parser.mly"
    (
         let (s1,d1,sh1) = _4 in
         {
           MIfunctionIO.rawfunc = _1;
           MIfunctionIO.func = [];
           MIfunctionIO.s = s1;
           MIfunctionIO.d = d1;
           MIfunctionIO.sh = sh1;
           MIfunctionIO.ret = _7
         }
       )
# 1166 "manualinput_parser.ml"
               : 'funcIO))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funcIO) in
    Obj.repr(
# 360 "manualinput_parser.mly"
      ( [_1] )
# 1173 "manualinput_parser.ml"
               : 'funcIO_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funcIO) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funcIO_seq) in
    Obj.repr(
# 362 "manualinput_parser.mly"
      ( _1 :: _2 )
# 1181 "manualinput_parser.ml"
               : 'funcIO_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funcIO_seq) in
    Obj.repr(
# 367 "manualinput_parser.mly"
      ( _1 )
# 1188 "manualinput_parser.ml"
               : 'file))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Slsyntax.MIfile.t)
